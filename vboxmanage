#!/usr/bin/env python

# Name:         vamp (VirtualBox/VBoxManage Ansible Module in Python)
# Version:      0.0.7
# Release:      1
# License:      CC-BA (Creative Commons By Attribution)
#               http://creativecommons.org/licenses/by/4.0/legalcode
# Group:        System
# Source:       N/A
# URL:          N/A
# Distribution: UNIX
# Vendor:       Lateral Blast
# Packager:     Richard Spindler <richard@lateralblast.com.au>
# Description:  VirtualBox/VBoxManage Ansible Module

from ansible.constants import mk_boolean
from ansible.module_utils.basic import *
import subprocess
import os
import re

DOCUMENTATION = '''
---
module: vboxmanage
version_added: "post 2.8.0"
short_description: Automate VirtualBox command line
dewscription: 
  - Automate VirtualBox command line
options:
  dryrun:
    description:
      - Used with import to perform a dry run (don't import)
  options:
    description:
      - Used with clonevm, import, and export to provide more options to command line
  output:
    description:
      - Used with export to specifile the output file
  type:
    description:
      - Used with startvm to specify headles etc
  import:
    description:
      - Import VM
  export:
    description:
      - Export VM
  showvminfo:
    description:
      - Get VM information
  controlvm:
    description:
      - Control VM
  startvm:
    description:
      - Start VM
  modifyvm:
    description:
      - Modify VM parameters
  unregistervm:
    description:
      - Unregister VM
  registervm:
    description:
      - Register VM
  list:
    description:
      - List VMs and other resources
  param:
    description:
      - Used with get/set parameter function, e.g. modifyvm
  value:
    description:
      - Used with set parameter function, e.g. modifyvm
'''

EXAMPLES = '''
# Set VM memory
- vboxmanage: function=modify vmname=VM_NAME memory=4096 
# Start VM in headless mode
- vboxmanage: function=start vmname=VM_NAME type=headless
# Stop VM
- vboxmanage: function=control vmname=VM_NAME state=poweroff
# Export VM
- vboxmanage: function=export vmname=VMNAME output=VM_NAME-export.ova 
# Import VM
- vboxmanage: function=import filename=/path/to/VM_IMPORT.ova
'''
def vboxmanage_other(module):
  command = "vboxmanage --%s" % (module.params['function'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_importvm(module):
  if module.params['dryrun'] == "yes":
    dryrun = "--dryrun"
  else:
    dryrun = ""
  command = "vboxmanage %s %s %s" % (module.params['function'], module.params['filename'], dryrun)
  for param in module.params:
    if not re.search("vmname|function|list", param):
      value = module.params[param]
      if value != None:
        command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_getproperty(module):
  if not module.params['param'] == None:
    if module.params['function'] == "getproperty":
      command = "vboxmanage showvminfo %s |grep %s" % (module.params['vmname'], module.params['param'])
    else:
      command = "vboxmanage %s %s %s %s" % (module.params['function'], module.params['vmname'], module.params['param'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
    for param in module.params:
      if not re.search("vmname|function|list", param):
        value = module.params[param]
        if value != None:
          command = "%s %s" % (command, param)
  if module.params['search'] != None:
    commnd = "%s |grep \"%s\"" % (command, module.params['search'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_setproperty(module):
  if not module.params['param'] == None:
    command = "vboxmanage %s %s %s %s" % (module.params['function'], module.params['vmname'], module.params['param'], module.params['value'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
    for param in module.params:
      if not re.search("vmname|function|list", param):
        value = module.params[param]
        if value != None:
          command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_controlvm(module):
  if module.params['state'] != None:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'], module.params['state'])
  else:
    if module.params['param'] != None:
      command = "%s %s %s %s" % (module.params['function'], module.params['vmname'], module.params['param'], module.params['value'])
    else:
      command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
      for param in module.params:
        if not re.search("vmname|function|list", param):
          value = module.params[param]
          if value != None:
            command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_list(module):
  if module.params['param'] != None:
    if module.params['machinereadable'] == "yes":
      command = "vboxmanage %s %s --machinereadable" % (module.params['function'], module.params['param'])
    else:
      command = "vboxmanage %s %s" % (module.params['function'], module.params['param'])
  else:
    if module.params['machinereadable'] == "yes":
      command = "vboxmanage %s %s --machinereadable" % (module.params['function'], module.params['list'])
    else:
      command = "vboxmanage %s %s" % (module.params['function'], module.params['list'])
  if module.params['search'] != None:
    commnd = "%s |grep \"%s\"" % (command, module.params['search'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_createmedium(module):
  command = "vboxmanage %s %s --filename %s" % (module.params['function'], module.params['devive'], module.params['filename'])
  for param in module.params:
    if not re.search("vmname|function|list", param):
      value = module.params[param]
      if value != None:
        command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_closemedium(module):
  if module.params['uuid'] != None:
    module.params['filename'] = module.params['uuid']
  if module.params['delete'] == "yes":
    command = "vboxmanage %s %s %s --delete" % (module.params['function'], module.params['device'], module.params['filename'])
  else:
    command = "vboxmanage %s %s %s" % (module.params['function'], module.params['device'], module.params['filename'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_unregistervm(module):
  if module.params['delete'] == "yes":
    command = "vboxmanage %s %s --delete" % (module.params['function'], module.params['vmname'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_function(module):
  command = ""
  if module.params['param'] != None:
    if module.params['function'] == "showvminfo":
      command = "%s %s |grep %s" % (module.params['function'], module.params['vmname'], module.params['param'])
    else:
      command = "%s %s --%s %s" % (module.params['function'], module.params['vmname'], module.params['param'], module.params['value'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
    for param in module.params:
      if not re.search("vmname|function|list", param):
        value = module.params[param]
        if value != None:
          if re.search("^yes$", value) and not re.search("removeonsuspend|active|remote|allowlocallogon|delete", param):
            command = "%s --%s" % (command, param)
          else:
            command = "%s --%s %s" % (command, param, value)
  if module.params['suffix'] != None:
    command = "%s %s" % (command, module.params['suffix'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def main():
  fields = {
    'accelerate2dvideo':        { 'default': None,   'type': 'str' },
    'accelerate3d':             { 'default': None,   'type': 'str' },
    'action':                   { 'default': None,   'type': 'str' },
    'active':                   { 'default': None,   'type': 'str' },
    'acpi':                     { 'default': None,   'type': 'str' },
    'add':                      { 'default': None,   'type': 'str' },
    'apic':                     { 'default': None,   'type': 'str' },
    'allowlocallogon':          { 'default': None,   'type': 'str' },
    'autostart-delay':          { 'default': None,   'type': 'str' },
    'autostart-enabled':        { 'default': None,   'type': 'str' },
    'bandwidthgroup':           { 'default': None,   'type': 'str' },
    'basefolder':               { 'default': None,   'type': 'str' },
    'biosapic':                 { 'default': None,   'type': 'str' },
    'biosbootmenu':             { 'default': None,   'type': 'str' },
    'bioslogodisplaytime':      { 'default': None,   'type': 'str' },
    'bioslogofadein':           { 'default': None,   'type': 'str' },
    'biospxedebug':             { 'default': None,   'type': 'str' },
    'bioslogoimagepath':        { 'default': None,   'type': 'str' },
    'biossystemtimeoffset':     { 'default': None,   'type': 'str' },
    'boot1':                    { 'default': None,   'type': 'str' },
    'boot2':                    { 'default': None,   'type': 'str' },
    'boot3':                    { 'default': None,   'type': 'str' },
    'boot4':                    { 'default': None,   'type': 'str' },
    'bootable':                 { 'default': None,   'type': 'str' },
    'chipset':                  { 'default': None,   'type': 'str' },
    'comment':                  { 'default': None,   'type': 'str' },
    'controller':               { 'default': None,   'type': 'str' },
    'cpu-profile':              { 'default': None,   'type': 'str' },
    'cpuexecutioncap':          { 'default': None,   'type': 'str' },
    'cpuhotplug':               { 'default': None,   'type': 'str' },
    'cpuid':                    { 'default': None,   'type': 'str' },
    'cpus':                     { 'default': None,   'type': 'str' },
    'delete':                   { 'default': None,   'type': 'str' },
    'description':              { 'default': None,   'type': 'str' },
    'device':                   { 'default': None,   'type': 'str' },
    'discard':                  { 'default': None,   'type': 'str' },
    'dryrun':                   { 'default': None,   'type': 'str' },
    'encodedlun':               { 'default': None,   'type': 'str' },
    'extpack':                  { 'default': None,   'type': 'str' },
    'filename':                 { 'default': None,   'type': 'str' },
    'firmware':                 { 'default': None,   'type': 'str' },
    'forceunmount':             { 'default': None,   'type': 'str' },
    'function':                 { 'default': 'list', 'type': 'str' },
    'graphicscontroller':       { 'default': None,   'type': 'str' },
    'group':                    { 'default': None,   'type': 'str' },
    'groups':                   { 'default': None,   'type': 'str' },
    'guestmemoryballoon':       { 'default': None,   'type': 'str' },
    'hardwareuuid':             { 'default': None,   'type': 'str' },
    'hostiocache':              { 'default': None,   'type': 'str' },
    'hotpluggable':             { 'default': None,   'type': 'str' },
    'hpet':                     { 'default': None,   'type': 'str' },
    'hwvirtex':                 { 'default': None,   'type': 'str' },
    'iconfile':                 { 'default': None,   'type': 'str' },
    'initiator':                { 'default': None,   'type': 'str' },
    'intnet':                   { 'default': None,   'type': 'str' },
    'largepages':               { 'default': None,   'type': 'str' },
    'list':                     { 'default': 'vms',  'type': 'str' },
    'longmode':                 { 'default': None,   'type': 'str' },
    'lun':                      { 'default': None,   'type': 'str' },
    'machinereadable':          { 'default': None,   'type': 'str' },
    'medium':                   { 'default': None,   'type': 'str' },
    'memory':                   { 'default': None,   'type': 'str' },
    'mtype':                    { 'default': None,   'type': 'str' },
    'name':                     { 'default': None,   'type': 'str' },
    'nested-hw-virt':           { 'default': None,   'type': 'str' },
    'nestedpaging':             { 'default': None,   'type': 'str' },
    'nonrotational':            { 'default': None,   'type': 'str' },
    'options':                  { 'default': None,   'type': 'str' },
    'ostype':                   { 'default': None,   'type': 'str' },
    'output':                   { 'default': None,   'type': 'str' },
    'pae':                      { 'default': None,   'type': 'str' },
    'pagefusion':               { 'default': None,   'type': 'str' },
    'password':                 { 'default': None,   'type': 'str' },
    'passwordfile':             { 'default': None,   'type': 'str' },
    'paravirtprovider':         { 'default': None,   'type': 'str' },
    'paravirtdebug':            { 'default': None,   'type': 'str' },
    'path':                     { 'default': None,   'type': 'str' },
    'param':                    { 'default': None,   'type': 'str' },
    'passthrough':              { 'default': None,   'type': 'str' },
    'pciattach':                { 'default': None,   'type': 'str' },
    'pcidetach':                { 'default': None,   'type': 'str' },
    'plugcpu':                  { 'default': None,   'type': 'str' },
    'portcount':                { 'default': None,   'type': 'str' },
    'unplugcpu':                { 'default': None,   'type': 'str' },
    'recording':                { 'default': None,   'type': 'str' },
    'recordingscreens':         { 'default': None,   'type': 'str' },
    'recordingfile':            { 'default': None,   'type': 'str' },
    'recordingmaxsize':         { 'default': None,   'type': 'str' },
    'recordingmaxtime':         { 'default': None,   'type': 'str' },
    'recordingopts':            { 'default': None,   'type': 'str' },
    'recordingvideofps':        { 'default': None,   'type': 'str' },
    'recordingvideorate':       { 'default': None,   'type': 'str' },
    'recordingvideores':        { 'default': None,   'type': 'str' },
    'register':                 { 'default': None,   'type': 'str' },
    'remote':                   { 'default': None,   'type': 'str' },
    'remove':                   { 'default': None,   'type': 'str' },
    'removeonsuspend':          { 'default': None,   'type': 'str' },
    'rename':                   { 'default': None,   'type': 'str' },
    'rtcuseutc':                { 'default': None,   'type': 'str' },
    'search':                   { 'default': None,   'type': 'str' },
    'server':                   { 'default': None,   'type': 'str' },
    'setparentuuid':            { 'default': None,   'type': 'str' },
    'settingspw':               { 'default': None,   'type': 'str' },
    'settingspwfile':           { 'default': None,   'type': 'str' },
    'setuuid':                  { 'default': None,   'type': 'str' },
    'snapshotfolder':           { 'default': None,   'type': 'str' },
    'spec-ctrl':                { 'default': None,   'type': 'str' },
    'state':                    { 'default': None,   'type': 'str' },
    'system-uuid-le':           { 'default': None,   'type': 'str' },
    'target':                   { 'default': None,   'type': 'str' },
    'teleporter':               { 'default': None,   'type': 'str' },
    'teleporteaddress':         { 'default': None,   'type': 'str' },
    'teleporterassword':        { 'default': None,   'type': 'str' },
    'teleporterasswordfile':    { 'default': None,   'type': 'str' },
    'teleporterport':           { 'default': None,   'type': 'str' },
    'tempeject':                { 'default': None,   'type': 'str' },
    'tport':                    { 'default': None,   'type': 'str' },
    'tracing-allow-vm-access':  { 'default': None,   'type': 'str' },
    'tracing-config':           { 'default': None,   'type': 'str' },
    'tracing-enabled':          { 'default': None,   'type': 'str' },
    'type':                     { 'default': None,   'type': 'str' },
    'usbcardreader':            { 'default': None,   'type': 'str' },
    'username':                 { 'default': None,   'type': 'str' },
    'uuid':                     { 'default': None,   'type': 'str' },
    'value':                    { 'default': None,   'type': 'str' },
    'vm-process-priority':      { 'default': None,   'type': 'str' },
    'vmname':                   { 'default': None,   'type': 'str' },
    'vmram':                    { 'default': None,   'type': 'str' },
    'vrde':                     { 'default': None,   'type': 'str' },
    'vrdeextpack':              { 'default': None,   'type': 'str' },
    'vrdeaddress':              { 'default': None,   'type': 'str' },
    'vrdeauthtype':             { 'default': None,   'type': 'str' },
    'vrdeauthlibrary':          { 'default': None,   'type': 'str' },
    'vrdemulticon':             { 'default': None,   'type': 'str' },
    'vrdeport':                 { 'default': None,   'type': 'str' },
    'vrdeproperty':             { 'default': None,   'type': 'str' },
    'vrdereusecon':             { 'default': None,   'type': 'str' },
    'vrdevideochannel':         { 'default': None,   'type': 'str' },
    'vrdevideochannelquality':  { 'default': None,   'type': 'str' },
    'vtxux':                    { 'default': None,   'type': 'str' },
    'vtxvpid':                  { 'default': None,   'type': 'str' },
    'x2apic':                   { 'default': None,   'type': 'str' }, 
    'suffix':                   { 'default': None,   'type': 'str' },
  }
  module = AnsibleModule(argument_spec = fields)

  function = module.params['function']
  function = re.sub("^modify$", "modifyvm", function)
  function = re.sub("^control$", "controlvm", function)
  function = re.sub("^create$", "createvm", function)
  function = re.sub("^import$", "importvm", function)
  function = re.sub("^unregister$", "vm", function)
#  function = re.sub("^$", "vm", function)
  module.params['function'] = function

  if function == "version":
    (stdout, stderr, rc, command) = vboxmanage_other(module)
  else:
    if function == "list":
      (stdout, stderr, rc, command) = vboxmanage_list(module)
    else:
      if function == "controlvm":
        (stdout, stderr, rc, command) = vboxmanage_controlvm(module)
      else:
        if function == "importvm":
          (stdout, stderr, rc, command) = vboxmanage_importvm(module)
        else:   
          if re.search("setproperty|setextrdata", function):
            (stdout, stderr, rc, command) = vboxmanage_setproperty(module)
          else:
            if re.search("getproperty|getextrdata", function):
              (stdout, stderr, rc, command) = vboxmanage_getproperty(module)
            else:
              if function == "closemedium":
                (stdout, stderr, rc, command) = vboxmanage_closemedium(module)
              else:
                (stdout, stderr, rc, command) = vboxmanage_function(module)

  module.exit_json(
    changed = True, 
    stdout  = stdout, 
    stderr  = stderr, 
    rc      = rc, 
    command = command, 
    meta    = module.params
  )

if __name__ == '__main__':
  main()
