#!/usr/bin/env python

# Name:         vamp (VirtualBox/VBoxManage Ansible Module in Python)
# Version:      0.0.8
# Release:      1
# License:      CC-BA (Creative Commons By Attribution)
#               http://creativecommons.org/licenses/by/4.0/legalcode
# Group:        System
# Source:       N/A
# URL:          N/A
# Distribution: UNIX
# Vendor:       Lateral Blast
# Packager:     Richard Spindler <richard@lateralblast.com.au>
# Description:  VirtualBox/VBoxManage Ansible Module

from ansible.constants import mk_boolean
from ansible.module_utils.basic import *
import subprocess
import os
import re

DOCUMENTATION = '''
---
module: vboxmanage
version_added: "post 2.8.0"
short_description: Automate VirtualBox command line
dewscription: 
  - Automate VirtualBox command line
options:
  dryrun:
    description:
      - Used with import to perform a dry run (don't import)
  options:
    description:
      - Used with clonevm, import, and export to provide more options to command line
  output:
    description:
      - Used with export to specifile the output file
  type:
    description:
      - Used with startvm to specify headles etc
  import:
    description:
      - Import VM
  export:
    description:
      - Export VM
  showvminfo:
    description:
      - Get VM information
  controlvm:
    description:
      - Control VM
  startvm:
    description:
      - Start VM
  modifyvm:
    description:
      - Modify VM parameters
  unregistervm:
    description:
      - Unregister VM
  registervm:
    description:
      - Register VM
  list:
    description:
      - List VMs and other resources
  param:
    description:
      - Used with get/set parameter function, e.g. modifyvm
  value:
    description:
      - Used with set parameter function, e.g. modifyvm
'''

EXAMPLES = '''
# Set VM memory
- vboxmanage: function=modify vmname=VM_NAME memory=4096 
# Start VM in headless mode
- vboxmanage: function=start vmname=VM_NAME type=headless
# Stop VM
- vboxmanage: function=control vmname=VM_NAME state=poweroff
# Export VM
- vboxmanage: function=export vmname=VMNAME output=VM_NAME-export.ova 
# Import VM
- vboxmanage: function=import filename=/path/to/VM_IMPORT.ova
'''
def vboxmanage_other(module):
  command = "vboxmanage --%s" % (module.params['function'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_importvm(module):
  if module.params['dryrun'] == "yes":
    dryrun = "--dryrun"
  else:
    dryrun = ""
  command = "vboxmanage %s %s %s" % (module.params['function'], module.params['filename'], dryrun)
  for param in module.params:
    if not re.search("vmname|function|list", param):
      value = module.params[param]
      if value != None:
        command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_getproperty(module):
  if not module.params['param'] == None:
    if module.params['function'] == "getproperty":
      command = "vboxmanage showvminfo %s |grep %s" % (module.params['vmname'], module.params['param'])
    else:
      command = "vboxmanage %s %s %s %s" % (module.params['function'], module.params['vmname'], module.params['param'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
    for param in module.params:
      if not re.search("vmname|function|list", param):
        value = module.params[param]
        if value != None:
          command = "%s %s" % (command, param)
  if module.params['search'] != None:
    commnd = "%s |grep \"%s\"" % (command, module.params['search'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_setproperty(module):
  if not module.params['param'] == None:
    command = "vboxmanage %s %s %s %s" % (module.params['function'], module.params['vmname'], module.params['param'], module.params['value'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
    for param in module.params:
      if not re.search("vmname|function|list", param):
        value = module.params[param]
        if value != None:
          command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_controlvm(module):
  if module.params['state'] != None:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'], module.params['state'])
  else:
    if module.params['param'] != None:
      command = "%s %s %s %s" % (module.params['function'], module.params['vmname'], module.params['param'], module.params['value'])
    else:
      command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
      for param in module.params:
        if not re.search("vmname|function|list", param):
          value = module.params[param]
          if value != None:
            command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_list(module):
  if module.params['param'] != None:
    if module.params['machinereadable'] == "yes":
      command = "vboxmanage %s %s --machinereadable" % (module.params['function'], module.params['param'])
    else:
      command = "vboxmanage %s %s" % (module.params['function'], module.params['param'])
  else:
    if module.params['machinereadable'] == "yes":
      command = "vboxmanage %s %s --machinereadable" % (module.params['function'], module.params['list'])
    else:
      command = "vboxmanage %s %s" % (module.params['function'], module.params['list'])
  if module.params['search'] != None:
    commnd = "%s |grep \"%s\"" % (command, module.params['search'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_createmedium(module):
  command = "vboxmanage %s %s --filename %s" % (module.params['function'], module.params['devive'], module.params['filename'])
  for param in module.params:
    if not re.search("vmname|function|list", param):
      value = module.params[param]
      if value != None:
        command = "%s %s %s" % (command, param, value)
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_closemedium(module):
  if module.params['uuid'] != None:
    module.params['filename'] = module.params['uuid']
  if module.params['delete'] == "yes":
    command = "vboxmanage %s %s %s --delete" % (module.params['function'], module.params['device'], module.params['filename'])
  else:
    command = "vboxmanage %s %s %s" % (module.params['function'], module.params['device'], module.params['filename'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_unregistervm(module):
  if module.params['delete'] == "yes":
    command = "vboxmanage %s %s --delete" % (module.params['function'], module.params['vmname'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def vboxmanage_function(module):
  command = ""
  if module.params['param'] != None:
    if module.params['function'] == "showvminfo":
      command = "%s %s |grep %s" % (module.params['function'], module.params['vmname'], module.params['param'])
    else:
      command = "%s %s --%s %s" % (module.params['function'], module.params['vmname'], module.params['param'], module.params['value'])
  else:
    command = "vboxmanage %s %s" % (module.params['function'], module.params['vmname'])
    for param in module.params:
      if not re.search("vmname|function|list", param):
        value = module.params[param]
        if value != None:
          if re.search("^yes$", value) and not re.search("removeonsuspend|active|remote|allowlocallogon|delete", param):
            command = "%s --%s" % (command, param)
          else:
            command = "%s --%s %s" % (command, param, value)
  if module.params['suffix'] != None:
    command = "%s %s" % (command, module.params['suffix'])
  process = subprocess.run(command, shell = True, universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  return(process.stdout, process.stderr, process.returncode, command)

def main():
  fields = {
    'accelerate2dvideo':          { 'default': None,   'type': 'str' },
    'accelerate3d':               { 'default': None,   'type': 'str' },
    'action':                     { 'default': None,   'type': 'str' },
    'active':                     { 'default': None,   'type': 'str' },
    'acpi':                       { 'default': None,   'type': 'str' },
    'add':                        { 'default': None,   'type': 'str' },
    'address':                    { 'default': None,   'type': 'str' },
    'allowlocallogon':            { 'default': None,   'type': 'str' },
    'apic':                       { 'default': None,   'type': 'str' },
    'arg0':                       { 'default': None,   'type': 'str' },
    'audio':                      { 'default': None,   'type': 'str' },
    'audioin':                    { 'default': None,   'type': 'str' },
    'audioout':                   { 'default': None,   'type': 'str' },
    'audiocontroller':            { 'default': None,   'type': 'str' },
    'audiocodec':                 { 'default': None,   'type': 'str' },
    'autostartdbpath':            { 'default': None,   'type': 'str' },
    'autostart-delay':            { 'default': None,   'type': 'str' },
    'autostart-enabled':          { 'default': None,   'type': 'str' },
    'backend':                    { 'default': None,   'type': 'str' },
    'basefolder':                 { 'default': None,   'type': 'str' },
    'bandwidthgroup':             { 'default': None,   'type': 'str' },
    'basefolder':                 { 'default': None,   'type': 'str' },
    'biosapic':                   { 'default': None,   'type': 'str' },
    'biosbootmenu':               { 'default': None,   'type': 'str' },
    'bioslogodisplaytime':        { 'default': None,   'type': 'str' },
    'bioslogofadein':             { 'default': None,   'type': 'str' },
    'biospxedebug':               { 'default': None,   'type': 'str' },
    'bioslogoimagepath':          { 'default': None,   'type': 'str' },
    'biossystemtimeoffset':       { 'default': None,   'type': 'str' },
    'boot1':                      { 'default': None,   'type': 'str' },
    'boot2':                      { 'default': None,   'type': 'str' },
    'boot3':                      { 'default': None,   'type': 'str' },
    'boot4':                      { 'default': None,   'type': 'str' },
    'bootable':                   { 'default': None,   'type': 'str' },
    'cableconnected1':            { 'default': None,   'type': 'str' },
    'cableconnected2':            { 'default': None,   'type': 'str' },
    'cableconnected3':            { 'default': None,   'type': 'str' },
    'cableconnected4':            { 'default': None,   'type': 'str' },
    'chipset':                    { 'default': None,   'type': 'str' },
    'cipher':                     { 'default': None,   'type': 'str' },
    'clipboard-mode':             { 'default': None,   'type': 'str' },
    'closesession':               { 'default': None,   'type': 'str' },
    'cloud':                      { 'default': None,   'type': 'str' },
    'cloudinstanceid':            { 'default': None,   'type': 'str' },
    'cloudbucket':                { 'default': None,   'type': 'str' },
    'cloudkeepobject':            { 'default': None,   'type': 'str' },
    'clouddisksize':              { 'default': None,   'type': 'str' },
    'clouddomain':                { 'default': None,   'type': 'str' },
    'cloudlaunchinstance':        { 'default': None,   'type': 'str' },
    'cloudlaunchmode':            { 'default': None,   'type': 'str' },
    'cloudocivcn':                { 'default': None,   'type': 'str' },
    'cloudocisubnet':             { 'default': None,   'type': 'str' },
    'cloudprivateip':             { 'default': None,   'type': 'str' },
    'cloudpublicip':              { 'default': None,   'type': 'str' },
    'cloudshape':                 { 'default': None,   'type': 'str' },
    'comment':                    { 'default': None,   'type': 'str' },
    'controller':                 { 'default': None,   'type': 'str' },
    'copyfrom':                   { 'default': None,   'type': 'str' },
    'copyto':                     { 'default': None,   'type': 'str' },
    'cpu-profile':                { 'default': None,   'type': 'str' },
    'cpuexecutioncap':            { 'default': None,   'type': 'str' },
    'cpuhotplug':                 { 'default': None,   'type': 'str' },
    'cpuid':                      { 'default': None,   'type': 'str' },
    'cpus':                       { 'default': None,   'type': 'str' },
    'createdir':                  { 'default': None,   'type': 'str' },
    'createdirectory':            { 'default': None,   'type': 'str' },
    'createtemp':                 { 'default': None,   'type': 'str' },
    'createtemporary':            { 'default': None,   'type': 'str' },
    'defaultfrontend':            { 'default': None,   'type': 'str' },
    'delete':                     { 'default': None,   'type': 'str' },
    'description':                { 'default': None,   'type': 'str' },
    'device':                     { 'default': None,   'type': 'str' },
    'dhcp':                       { 'default': None,   'type': 'str' },
    'disable':                    { 'default': None,   'type': 'str' },
    'discard':                    { 'default': None,   'type': 'str' },
    'domain':                     { 'default': None,   'type': 'str' },
    'draganddrop':                { 'default': None,   'type': 'str' },
    'dryrun':                     { 'default': None,   'type': 'str' },
    'enable':                     { 'default': None,   'type': 'str' },
    'encodedlun':                 { 'default': None,   'type': 'str' },
    'eula':                       { 'default': None,   'type': 'str' },
    'eulafile':                   { 'default': None,   'type': 'str' },
    'exe':                        { 'default': None,   'type': 'str' },
    'extpack':                    { 'default': None,   'type': 'str' },
    'filename':                   { 'default': None,   'type': 'str' },
    'firmware':                   { 'default': None,   'type': 'str' },
    'follow':                     { 'default': None,   'type': 'str' },
    'forceunmount':               { 'default': None,   'type': 'str' },
    'format':                     { 'default': None,   'type': 'str' },
    'function':                   { 'default': 'list', 'type': 'str' },
    'global':                     { 'default': 'list', 'type': 'str' },
    'graphicscontroller':         { 'default': None,   'type': 'str' },
    'group':                      { 'default': None,   'type': 'str' },
    'groups':                     { 'default': None,   'type': 'str' },
    'guestmemoryballoon':         { 'default': None,   'type': 'str' },
    'hardwareuuid':               { 'default': None,   'type': 'str' },
    'hostiocache':                { 'default': None,   'type': 'str' },
    'hotpluggable':               { 'default': None,   'type': 'str' },
    'hpet':                       { 'default': None,   'type': 'str' },
    'hwvirtex':                   { 'default': None,   'type': 'str' },
    'hwvirtexclusive':            { 'default': None,   'type': 'str' },
    'iconfile':                   { 'default': None,   'type': 'str' },
    'ignore-operhaned-processes': { 'default': None,   'type': 'str' },
    'initiator':                  { 'default': None,   'type': 'str' },
    'intnet':                     { 'default': None,   'type': 'str' },
    'intnet1':                    { 'default': None,   'type': 'str' },
    'intnet2':                    { 'default': None,   'type': 'str' },
    'intnet3':                    { 'default': None,   'type': 'str' },
    'intnet4':                    { 'default': None,   'type': 'str' },
    'ip':                         { 'default': None,   'type': 'str' },
    'ipv4':                       { 'default': None,   'type': 'str' },
    'ipv6':                       { 'default': None,   'type': 'str' },
    'keyboard':                   { 'default': None,   'type': 'str' },
    'largepages':                 { 'default': None,   'type': 'str' },
    'legacy09':                   { 'default': None,   'type': 'str' },
    'list':                       { 'default': 'vms',  'type': 'str' },
    'loghistorycount':            { 'default': None,   'type': 'str' },
    'logginglevel':               { 'default': None,   'type': 'str' },
    'longmode':                   { 'default': None,   'type': 'str' },
    'loopback-4':                 { 'default': None,   'type': 'str' },
    'loopback-6':                 { 'default': None,   'type': 'str' },
    'lpt1':                       { 'default': None,   'type': 'str' },
    'lpt2':                       { 'default': None,   'type': 'str' },
    'lpt3':                       { 'default': None,   'type': 'str' },
    'lpt4':                       { 'default': None,   'type': 'str' },
    'lptmode1':                   { 'default': None,   'type': 'str' },
    'lptmode2':                   { 'default': None,   'type': 'str' },
    'lptmode3':                   { 'default': None,   'type': 'str' },
    'lptmode4':                   { 'default': None,   'type': 'str' },
    'lun':                        { 'default': None,   'type': 'str' },
    'macaddress1':                { 'default': None,   'type': 'str' },
    'macaddress2':                { 'default': None,   'type': 'str' },
    'macaddress3':                { 'default': None,   'type': 'str' },
    'macaddress4':                { 'default': None,   'type': 'str' },
    'machinefolder':              { 'default': None,   'type': 'str' },
    'machinereadable':            { 'default': None,   'type': 'str' },
    'manufacturer':               { 'default': None,   'type': 'str' },
    'maskedinterfaces':           { 'default': None,   'type': 'str' },
    'medium':                     { 'default': None,   'type': 'str' },
    'memory':                     { 'default': None,   'type': 'str' },
    'mkdir':                      { 'default': None,   'type': 'str' },
    'mktemp':                     { 'default': None,   'type': 'str' },
    'mouse':                      { 'default': None,   'type': 'str' },
    'move':                       { 'default': None,   'type': 'str' },
    'mtype':                      { 'default': None,   'type': 'str' },
    'mv':                         { 'default': None,   'type': 'str' },
    'name':                       { 'default': None,   'type': 'str' },
    'nataliasmode1':              { 'default': None,   'type': 'str' },
    'nataliasmode2':              { 'default': None,   'type': 'str' },
    'nataliasmode3':              { 'default': None,   'type': 'str' },
    'nataliasmode4':              { 'default': None,   'type': 'str' },
    'natbindip1':                 { 'default': None,   'type': 'str' },
    'natbindip2':                 { 'default': None,   'type': 'str' },
    'natbindip3':                 { 'default': None,   'type': 'str' },
    'natbindip4':                 { 'default': None,   'type': 'str' },
    'natdnshostresolver1':        { 'default': None,   'type': 'str' },
    'natdnshostresolver2':        { 'default': None,   'type': 'str' },
    'natdnshostresolver3':        { 'default': None,   'type': 'str' },
    'natdnshostresolver4':        { 'default': None,   'type': 'str' },
    'natdnspassdomain1':          { 'default': None,   'type': 'str' },
    'natdnspassdomain2':          { 'default': None,   'type': 'str' },
    'natdnspassdomain3':          { 'default': None,   'type': 'str' },
    'natdnspassdomain4':          { 'default': None,   'type': 'str' },
    'natproxy1':                  { 'default': None,   'type': 'str' },
    'natproxy2':                  { 'default': None,   'type': 'str' },
    'natproxy3':                  { 'default': None,   'type': 'str' },
    'natproxy4':                  { 'default': None,   'type': 'str' },
    'natnet1':                    { 'default': None,   'type': 'str' },
    'natnet2':                    { 'default': None,   'type': 'str' },
    'natnet3':                    { 'default': None,   'type': 'str' },
    'natnet4':                    { 'default': None,   'type': 'str' },
    'natpf1':                     { 'default': None,   'type': 'str' },
    'natpf2':                     { 'default': None,   'type': 'str' },
    'natpf3':                     { 'default': None,   'type': 'str' },
    'natpf4':                     { 'default': None,   'type': 'str' },
    'nattftpfile1':               { 'default': None,   'type': 'str' },
    'nattftpfile2':               { 'default': None,   'type': 'str' },
    'nattftpfile3':               { 'default': None,   'type': 'str' },
    'nattftpfile4':               { 'default': None,   'type': 'str' },
    'nattftpprefix1':             { 'default': None,   'type': 'str' },
    'nattftpprefix2':             { 'default': None,   'type': 'str' },
    'nattftpprefix3':             { 'default': None,   'type': 'str' },
    'nattftpprefix4':             { 'default': None,   'type': 'str' },
    'nattftpserver1':             { 'default': None,   'type': 'str' },
    'nattftpserver2':             { 'default': None,   'type': 'str' },
    'nattftpserver3':             { 'default': None,   'type': 'str' },
    'nattftpserver4':             { 'default': None,   'type': 'str' },
    'natsettings1':               { 'default': None,   'type': 'str' },
    'natsettings2':               { 'default': None,   'type': 'str' },
    'natsettings3':               { 'default': None,   'type': 'str' },
    'natsettings4':               { 'default': None,   'type': 'str' },
    'nested-hw-virt':             { 'default': None,   'type': 'str' },
    'nestedpaging':               { 'default': None,   'type': 'str' },
    'netname':                    { 'default': None,   'type': 'str' },
    'newpassword':                { 'default': None,   'type': 'str' },
    'newpasswordid':              { 'default': None,   'type': 'str' },
    'nic1':                       { 'default': None,   'type': 'str' },
    'nic2':                       { 'default': None,   'type': 'str' },
    'nic3':                       { 'default': None,   'type': 'str' },
    'nic4':                       { 'default': None,   'type': 'str' },
    'nicgenericdrv1':             { 'default': None,   'type': 'str' },
    'nicgenericdrv2':             { 'default': None,   'type': 'str' },
    'nicgenericdrv3':             { 'default': None,   'type': 'str' },
    'nicgenericdrv4':             { 'default': None,   'type': 'str' },
    'nictrace1':                  { 'default': None,   'type': 'str' },
    'nictrace2':                  { 'default': None,   'type': 'str' },
    'nictrace3':                  { 'default': None,   'type': 'str' },
    'nictrace4':                  { 'default': None,   'type': 'str' },
    'nictracefile1':              { 'default': None,   'type': 'str' },
    'nictracefile2':              { 'default': None,   'type': 'str' },
    'nictracefile3':              { 'default': None,   'type': 'str' },
    'nictracefile4':              { 'default': None,   'type': 'str' },
    'nictype1':                   { 'default': None,   'type': 'str' },
    'nictype2':                   { 'default': None,   'type': 'str' },
    'nictype3':                   { 'default': None,   'type': 'str' },
    'nictype4':                   { 'default': None,   'type': 'str' },
    'nonrotational':              { 'default': None,   'type': 'str' },
    'oldpassword':                { 'default': None,   'type': 'str' },
    'options':                    { 'default': None,   'type': 'str' },
    'ostype':                     { 'default': None,   'type': 'str' },
    'output':                     { 'default': None,   'type': 'str' },
    'ovf09':                      { 'default': None,   'type': 'str' },
    'ovf10':                      { 'default': None,   'type': 'str' },
    'ovf20':                      { 'default': None,   'type': 'str' },
    'opc10':                      { 'default': None,   'type': 'str' },
    'pae':                        { 'default': None,   'type': 'str' },
    'pagefusion':                 { 'default': None,   'type': 'str' },
    'password':                   { 'default': None,   'type': 'str' },
    'passwordfile':               { 'default': None,   'type': 'str' },
    'paravirtprovider':           { 'default': None,   'type': 'str' },
    'paravirtdebug':              { 'default': None,   'type': 'str' },
    'path':                       { 'default': None,   'type': 'str' },
    'param':                      { 'default': None,   'type': 'str' },
    'passthrough':                { 'default': None,   'type': 'str' },
    'pciattach':                  { 'default': None,   'type': 'str' },
    'pcidetach':                  { 'default': None,   'type': 'str' },
    'plugcpu':                    { 'default': None,   'type': 'str' },
    'port-forward-4':             { 'default': None,   'type': 'str' },
    'port-forward-6':             { 'default': None,   'type': 'str' },
    'portcount':                  { 'default': None,   'type': 'str' },
    'program':                    { 'default': None,   'type': 'str' },
    'product':                    { 'default': None,   'type': 'str' },
    'profile':                    { 'default': None,   'type': 'str' },
    'productid':                  { 'default': None,   'type': 'str' },
    'producturl':                 { 'default': None,   'type': 'str' },
    'proxymode':                  { 'default': None,   'type': 'str' },
    'proxyurl':                   { 'default': None,   'type': 'str' },
    'putenv':                     { 'default': None,   'type': 'str' },
    'unplugcpu':                  { 'default': None,   'type': 'str' },
    'recording':                  { 'default': None,   'type': 'str' },
    'recordingscreens':           { 'default': None,   'type': 'str' },
    'recordingfile':              { 'default': None,   'type': 'str' },
    'recordingmaxsize':           { 'default': None,   'type': 'str' },
    'recordingmaxtime':           { 'default': None,   'type': 'str' },
    'recordingopts':              { 'default': None,   'type': 'str' },
    'recordingvideofps':          { 'default': None,   'type': 'str' },
    'recordingvideorate':         { 'default': None,   'type': 'str' },
    'recordingvideores':          { 'default': None,   'type': 'str' },
    'recursive':                  { 'default': None,   'type': 'str' },
    'register':                   { 'default': None,   'type': 'str' },
    'remote':                     { 'default': None,   'type': 'str' },
    'remove':                     { 'default': None,   'type': 'str' },
    'removedir':                  { 'default': None,   'type': 'str' },
    'removedirectory':            { 'default': None,   'type': 'str' },
    'removefile':                 { 'default': None,   'type': 'str' },
    'removeonsuspend':            { 'default': None,   'type': 'str' },
    'ren':                        { 'default': None,   'type': 'str' },
    'rename':                     { 'default': None,   'type': 'str' },
    'revision':                   { 'default': None,   'type': 'str' },
    'rm':                         { 'default': None,   'type': 'str' },
    'rmdir':                      { 'default': None,   'type': 'str' },
    'rtcuseutc':                  { 'default': None,   'type': 'str' },
    'run':                        { 'default': None,   'type': 'str' },
    'screenshotpng':              { 'default': None,   'type': 'str' },
    'search':                     { 'default': None,   'type': 'str' },
    'serialnumber':               { 'default': None,   'type': 'str' },
    'server':                     { 'default': None,   'type': 'str' },
    'session-id':                 { 'default': None,   'type': 'str' },
    'session-name':               { 'default': None,   'type': 'str' },
    'setscreenlayout':            { 'default': None,   'type': 'str' },
    'setparentuuid':              { 'default': None,   'type': 'str' },
    'settingspw':                 { 'default': None,   'type': 'str' },
    'settingspwfile':             { 'default': None,   'type': 'str' },
    'setup':                      { 'default': None,   'type': 'str' },
    'setuuid':                    { 'default': None,   'type': 'str' },
    'setvideomodehint':           { 'default': None,   'type': 'str' },
    'snapshotfolder':             { 'default': None,   'type': 'str' },
    'source':                     { 'default': None,   'type': 'str' },
    'spec-ctrl':                  { 'default': None,   'type': 'str' },
    'stat':                       { 'default': None,   'type': 'str' },
    'state':                      { 'default': None,   'type': 'str' },
    'system-uuid-le':             { 'default': None,   'type': 'str' },
    'target':                     { 'default': None,   'type': 'str' },
    'target-directory':           { 'default': None,   'type': 'str' },
    'teleporter':                 { 'default': None,   'type': 'str' },
    'teleporteaddress':           { 'default': None,   'type': 'str' },
    'teleporterassword':          { 'default': None,   'type': 'str' },
    'teleporterasswordfile':      { 'default': None,   'type': 'str' },
    'teleporterport':             { 'default': None,   'type': 'str' },
    'tempeject':                  { 'default': None,   'type': 'str' },
    'timeout':                    { 'default': None,   'type': 'str' },
    'tport':                      { 'default': None,   'type': 'str' },
    'tracing-allow-vm-access':    { 'default': None,   'type': 'str' },
    'tracing-config':             { 'default': None,   'type': 'str' },
    'tracing-enabled':            { 'default': None,   'type': 'str' },
    'type':                       { 'default': None,   'type': 'str' },
    'uart1':                      { 'default': None,   'type': 'str' },
    'uart2':                      { 'default': None,   'type': 'str' },
    'uart3':                      { 'default': None,   'type': 'str' },
    'uart4':                      { 'default': None,   'type': 'str' },
    'uartmode1':                  { 'default': None,   'type': 'str' },
    'uartmode2':                  { 'default': None,   'type': 'str' },
    'uartmode3':                  { 'default': None,   'type': 'str' },
    'uartmode4':                  { 'default': None,   'type': 'str' },
    'uarttype1':                  { 'default': None,   'type': 'str' },
    'uarttype2':                  { 'default': None,   'type': 'str' },
    'uarttype3':                  { 'default': None,   'type': 'str' },
    'uarttype4':                  { 'default': None,   'type': 'str' },
    'unquoted-args':              { 'default': None,   'type': 'str' },
    'usbcardreader':              { 'default': None,   'type': 'str' },
    'username':                   { 'default': None,   'type': 'str' },
    'uuid':                       { 'default': None,   'type': 'str' },
    'value':                      { 'default': None,   'type': 'str' },
    'variant':                    { 'default': None,   'type': 'str' },
    'vendor':                     { 'default': None,   'type': 'str' },
    'vendorid':                   { 'default': None,   'type': 'str' },
    'vendorurl':                  { 'default': None,   'type': 'str' },
    'vm-process-priority':        { 'default': None,   'type': 'str' },
    'vmname':                     { 'default': None,   'type': 'str' },
    'vmram':                      { 'default': None,   'type': 'str' },
    'vrde':                       { 'default': None,   'type': 'str' },
    'vrdeextpack':                { 'default': None,   'type': 'str' },
    'vrdeaddress':                { 'default': None,   'type': 'str' },
    'vrdeauthtype':               { 'default': None,   'type': 'str' },
    'vrdeauthlibrary':            { 'default': None,   'type': 'str' },
    'vrdemulticon':               { 'default': None,   'type': 'str' },
    'vrdeport':                   { 'default': None,   'type': 'str' },
    'vrdeproperty':               { 'default': None,   'type': 'str' },
    'vrdereusecon':               { 'default': None,   'type': 'str' },
    'vrdevideochannel':           { 'default': None,   'type': 'str' },
    'vrdevideochannelquality':    { 'default': None,   'type': 'str' },
    'vsys':                       { 'default': None,   'type': 'str' },
    'vtxux':                      { 'default': None,   'type': 'str' },
    'vtxvpid':                    { 'default': None,   'type': 'str' },
    'wait-start':                 { 'default': None,   'type': 'str' },
    'wait-stdout':                { 'default': None,   'type': 'str' },
    'no-wait-stdout':             { 'default': None,   'type': 'str' },
    'wait-stderr':                { 'default': None,   'type': 'str' },
    'no-wait-stderr':             { 'default': None,   'type': 'str' },
    'watch':                      { 'default': None,   'type': 'str' },
    'websrvauthlibrary':          { 'default': None,   'type': 'str' },
    'x2apic':                     { 'default': None,   'type': 'str' }, 
    'suffix':                     { 'default': None,   'type': 'str' }
  }
  module = AnsibleModule(argument_spec = fields)

  function = module.params['function']
  function = re.sub("^modify$", "modifyvm", function)
  function = re.sub("^control$", "controlvm", function)
  function = re.sub("^create$", "createvm", function)
  function = re.sub("^import$", "importvm", function)
  function = re.sub("^unregister$", "vm", function)
#  function = re.sub("^$", "vm", function)
  module.params['function'] = function

  if function == "version":
    (stdout, stderr, rc, command) = vboxmanage_other(module)
  else:
    if function == "list":
      (stdout, stderr, rc, command) = vboxmanage_list(module)
    else:
      if function == "controlvm":
        (stdout, stderr, rc, command) = vboxmanage_controlvm(module)
      else:
        if function == "importvm":
          (stdout, stderr, rc, command) = vboxmanage_importvm(module)
        else:   
          if re.search("setproperty|setextrdata", function):
            (stdout, stderr, rc, command) = vboxmanage_setproperty(module)
          else:
            if re.search("getproperty|getextrdata", function):
              (stdout, stderr, rc, command) = vboxmanage_getproperty(module)
            else:
              if function == "closemedium":
                (stdout, stderr, rc, command) = vboxmanage_closemedium(module)
              else:
                (stdout, stderr, rc, command) = vboxmanage_function(module)

  module.exit_json(
    changed = True, 
    stdout  = stdout, 
    stderr  = stderr, 
    rc      = rc, 
    command = command, 
    meta    = module.params
  )

if __name__ == '__main__':
  main()
